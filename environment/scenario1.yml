# scenario1.yml

# Déploiement en mode local
- hosts: localhost
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3  
    region: us-east-1
    instance_type: t2.micro
    key_name: vockey # Change for your key pair
    sec_group: "test-security-group"
    image_id: ami-058bd2d568351da34 # Debian 12 OS  
  vars_files:
    - config_vars.yml
  environment:
    AWS_SHARED_CREDENTIALS_FILE: "{{ aws_creds }}"
  tasks:

    - name: "Installe et deploy docker"
      include_tasks: install_docker.yml 
      when: mode == "local"

    - name: "Déploiement en mode local du serveur de base de données"
      include_tasks: create_a_bdd_server.yml
      when: mode == "local"

    - name: "Déploiement en mode local du serveur FTP"
      include_tasks: ftp_serv.yml
      when: mode == "local"
    
# Deploiement via aws
    - name: "Deploiement de l'instance EC2 pour la BDD"
      include_tasks: create_ec2.yml
      vars: 
        instance_name: "BDD EC2"
        host_name: "bdd_host"
      when: mode == "aws" 

    - name: "Deploiement de l'instance EC2 pour le FTP server"
      include_tasks: create_ec2.yml
      vars: 
        instance_name: "FTP EC2"
        host_name: "ftp_host"
      when: mode == "aws" 

    - name: "Deploiement de l'instance EC2 pour la machine client"
      include_tasks: create_ec2.yml
      vars: 
        instance_name: "default_machine"
        host_name: "client_host"
      when: mode == "aws" 

- name: "Deploiement du serveur de base de donnée via AWS"
  hosts: bdd_host
  remote_user: admin
  become: true
  vars_files:
    - config_vars.yml
  vars:
    ansible_python_interpreter: /usr/bin/python3  
    ansible_ssh_private_key_file: "{{ ssh_key }}"
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
  environment:
    AWS_SHARED_CREDENTIALS_FILE: "{{ aws_creds }}"
  tasks:
    - name: "Installe et deploy docker"
      include_tasks: install_docker.yml 
      when: mode == "aws"

    - name: "Deploiement du serveur de base de donnée via AWS"
      include_tasks: create_a_bdd_server.yml
      when: mode == "aws"


- name: "Deploiement du serveur ftp via AWS"
  hosts: ftp_host
  remote_user: admin
  become: true
  vars_files:
    - config_vars.yml
  vars:
    ansible_python_interpreter: /usr/bin/python3  
    ansible_ssh_private_key_file: "{{ ssh_key }}"
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
  environment:
    AWS_SHARED_CREDENTIALS_FILE: "{{ aws_creds }}"
  tasks:
    - name: "Installe et deploy docker"
      include_tasks: install_docker.yml 
      when: mode == "aws"

    - name: "Deploiement du serveur ftp via AWS"
      include_tasks: ftp_serv.yml
      when: mode == "aws"
 

- name: "Deploiement de la machine client via AWS"
  hosts: client_host
  remote_user: admin
  become: true
  vars_files:
    - config_vars.yml
  vars:
    ansible_python_interpreter: /usr/bin/python3  
    ansible_ssh_private_key_file: "{{ ssh_key }}"
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
  environment:
    AWS_SHARED_CREDENTIALS_FILE: "{{ aws_creds }}"
  tasks:
    - name: "Installe et deploy docker"
      include_tasks: install_docker.yml 
      when: mode == "aws"

    - name: "Default machine for user"
      include_tasks: default_machine.yml
      when: mode =="aws"