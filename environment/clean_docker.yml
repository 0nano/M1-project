# clean_docker.yml

- hosts: localhost
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3  
    region: us-east-1
    instance_type: t2.micro
    key_name: vockey # Change for your key pair
    sec_group: "test-security-group"
    image_id: ami-058bd2d568351da34 # Debian 12 OS  
  vars_files:
    - config_vars.yml
  environment:
    AWS_SHARED_CREDENTIALS_FILE: "{{ aws_creds }}"

  tasks:
    - name: Get list of running containers on local
      command: docker ps -q
      register: running_containers
      changed_when: false
      check_mode: no
      when: mode == "local"

    - name: Stop and remove running containers
      docker_container:
        name: "{{ item }}"
        state: absent
      loop: "{{ running_containers.stdout_lines }}"
      when: mode == "local"

# Cleaning in aws
    - name: "Deploiement de l'instance EC2 pour la BDD"
      include_tasks: create_ec2.yml
      vars: 
        instance_name: "scenario1"
        host_name: "aws_hostname"
      when: mode == "aws" 

- name: "clean docker"
  hosts: aws_hostname
  remote_user: admin
  become: true
  vars_files:
    - config_vars.yml
  vars:
    instance_name: "scenario1"
    ansible_python_interpreter: /usr/bin/python3  
    ansible_ssh_private_key_file: "{{ ssh_key }}"
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
  environment:
    AWS_SHARED_CREDENTIALS_FILE: "{{ aws_creds }}"
  tasks:
    
    - name: Get list of running containers on the aws
      become: true
      command: sudo docker ps -q
      register: running_containers
      changed_when: false
      check_mode: no
      when: mode == "aws"

    - name: Stop and remove running containers
      docker_container:
        name: "{{ item }}"
        state: absent
      loop: "{{ running_containers.stdout_lines }}"
      when: mode == "aws"

    - name: Get EC2 instance info
      ec2_instance_info:
        filters:
          "tag:Name": "{{ instance_name }}"  # Remplacer avec le nom de votre instance EC2
      register: ec2_info

    - name: Extract EC2 instance ID
      set_fact:
        ec2_instance_id: "{{ ec2_info.instances[0].id }}"
      when: ec2_info.instances | length > 0

    - name: "Supprimer l'instance EC2"
      ec2_instance:
        state: absent
        instance_ids: "{{ ec2_instance_id }}"
      when: second_mode == "ec2" and ec2_instance_id is defined

    



